// Calculate Gi* based on conditional permutations

// Warning: The time required for testGetisOrdGiStar() to execute with a 'large'  
// data set will likely result in a system timeout error. Adjust the PenTimer
// (in microseconds) accordingly:

// Ten minutes (10000 microseconds):
// window.CP.PenTimer.MAX_TIME_IN_LOOP_WO_EXIT = 10000;

// For most web applications, you are encouraged to use the normal (z-score) 
// approximation instead of the permutation test. However, beware that the normal 
// approximation is questionable in cases when spatial units have a limited number
// of connections.

// Requires GetisOrdG_helpers.js

// START
function permuteGetisOrdGiStar(dataArray, weightMatrix) { 
  let n = weightMatrix.length;
  let total = sumArray(dataArray);
  let giOut = new Array(n);
  for (let i = 0; i < n; i++) {
    let fix = dataArray[i]; // copy the original value at location i
    let dataArrayCopy = dataArray.slice(0); // make shallow copy of entire array, otherwise it will modifiy the input array
    dataArrayCopy.splice(i, 1); // remove the focal location i from the copy
    let shuffled = shuffle(dataArrayCopy); // shuffle the remaining values
    shuffled.splice(i, 0, fix); // return i to its original location
    let numerator = sumArray(multiplyArrays(shuffled, weightMatrix[i])) // Calculate Gi* for permuted data array
    giOut[i] =  numerator / total;  // add to giOut by index i
  }
return giOut;  
}
// END

// let test2 = permuteGetisOrdGiStar(peakValleyFlat, rowStandardize(bMat))
// console.log(test2)

